stages:
  - verify
  - build
  - test

cache:
  - key: npm-cache
    paths:
      - client/node_modules
  - key: gradle-cache
    paths:
      - server/.gradle/caches/
      - server/.gradle/notifications/
      - server/.gradle/wrapper/

# verify stage
eslint:
  stage: verify
  image: node:18
  script:
    - cd client
    - npm install
    - npm run eslint

checkstyle:
  stage: verify
  image: eclipse-temurin:17-jdk-jammy
  script:
    - cd server
    # - curl -s https://api.github.com/repos/checkstyle/checkstyle/releases/latest | grep -wo 'https.*jar' | wget -q -O ./checkstyle.jar -i -    # Latest release is broken
    - wget -q -O ./checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.7.0/checkstyle-10.7.0-all.jar # So we manually specify previous version
    - java -jar ./checkstyle.jar src/ -c /google_checks.xml

# build stage
build-npm:
  stage: build
  image: node:18.12.1-alpine
  script:
    - cd client
    - npm install webpack-cli -g
    - npm install
    - npm rebuild node-sass
    - npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - client/build/

build-gradle:
  stage: build
  needs:
    - checkstyle
  image: eclipse-temurin:17-jdk-jammy
  script:
    - cd server
    - chmod +x ./gradlew
    - ./gradlew --gradle-user-home .gradle/ bootJar
  artifacts:
    expire_in: 1 week
    paths:
      - server/build/libs/

# test stage
junit:
  stage: test
  needs:
    - build-gradle
  image: eclipse-temurin:17-jdk-jammy
  variables:
    MYSQL_DATABASE: test_database
    MYSQL_HOST: localhost
    MYSQL_PORT: 3000
    MYSQL_USER: test_user
    MYSQL_PASSWORD: test_password
  script:
    - cd server
    - chmod +x ./gradlew
    - ./gradlew --gradle-user-home .gradle/ test
  dependencies:
    - build-gradle
  artifacts:
    when: always
    reports:
      junit:
        - server/build/test-results/test/**/TEST-*.xml
